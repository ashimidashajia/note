20110609

关于用多态实现 螺丝刀 和打铃上课 的例子 同是多态，但是考虑问题的角度不同
就向 10/5=2  表示两个含义：1 10分成5份，每份2个 2 10里面有2个5
同一个事物，这样看是这个样子，那样看是那个样子。心理学书上的那张图片，这样看就是美女，
那样看就是老妇人。同一件事情这样看就是积极的，那样看就是消极的。
追女孩的例子就比较形象了。　上课铃声的例子，铃声是一个驱动力，每个人做什么我不管。
针对同一个事件的不同反应。而另一个是要做一件事情，针对不同情况有不同方法。
那个各种策略可能是一类的，也可能就不是一类的　　比如螺丝刀头　和　刀子头
那天给gu讲课　　我说私有继承就好比生了一个女儿。不能够再次被继承了

那么接口的概念是如何体现出来的呢？

20120811
赵毅辉一番讲解，终于明白了什么是“接口”
首先，java语言有interface整个。

1 20100602  我的C++还一直徘徊在语言层次
  起因：给新业务部做一个uc/fs,看到了底层针对ram，ide等定义了一组读写函数，觉得类似
C++的多态特性。另外，新业务部门的王永杰跟我说了java中的策略模式，并且打了一个比方：
可以更换头的螺丝刀。这两件事情引发了我的一些思考。（在土城公园）

  1 C++的多态是用继承和虚函数实现的，虚函数实现的关键也是函数指针。关于多态有两个生
活中的例子。一是谭浩翔说的：上课铃声响了，学生进教室，老师上讲台，“不同的对象收到同
一个消息作出不同的响应”。在桌面上单击一个图标，有的打开word、有的打开记事本，“不同
的对象收到同一个消息作出不同的响应”。这是多态。二是可以换头的螺丝刀，柄只有一个，头
有很多，根据不同场合更换不同的头。这个java中叫做策略模式，实际上也是靠C++的多态（继承
和虚函数）实现的，但是跟第一个例子明显不同。好像是考虑问题的出发点不同。网上有一个例子：
我有很多追求女孩子的策略，针对不同女孩子拿出不同的策略。另外一种情况比较美了：我放出话
去：我要恋爱了，结果不同的女孩子作出不同的反应来追我，我只是放出话去，并没有很多策略。
每个女孩子有自己的方法来追我^_^。这两种情况都可以用C++的多态特性来实现。策略模式讲究
的是不同情况安装不同策略，换头的螺丝刀再恰当不过了。策略模式要把公共部分提取出来（柄），
不同部分做成策略(头)。而第一个例子是发出一个消息后，不同对象有不同反应，发消息的人不关
心每个对象的反应，每个对象的反应每个对象自己定义。C++的多态就是函数指针的变相高级用法。
uc/fs中不同介质读写的例子应该属于策略模式吧。针对不同的介质使用不同的策略。

当然uc/fs里面的代码也可以写成switch case形式，公共部分也可以提取出来，不同的部分做成
switch case，但是这样不觉得像一把一个柄上同时有3个头的螺丝刀吗？
而uc/fs原来的写法每次传一个结构体进去，不同情况结构体里面的函数指针对应响应的操作，这
就是一个策略，传不同的结构体进去，就是在换头。这是C++中多态的雏形。但是实现方式不同：
C++中的多态是函数里面用基类指针调用一个函数，传进来的是基类的共有派生类，基类指针调用
函数实际上通过虚函数表就调用到了派生类的响应函数。就相当于在一个“固定偏移地址”（虚函
数表的地址）处有一个函数指针变量，在不停的更换指针里面函数。

实际上，在u-boot、sdl、linux这些C语言程序中，为了兼容更多的硬件都使用了类似的函数指
针的方法，这都是策略模式。针对不同的硬件更换不同的“螺丝刀头”。
这是面向对象中的多态。此时多态有2中理解：一个是我面对不同对象有多种策略，二是我发出一
个消息，不同对象收到后有不同反应。

20131024 （一套严密的逻辑）
1 C++中的override overload
virtual用指针调用才能发挥作用，当然也可以直接调用，就跟override一样了呗。
基类指针指向共有派生类后，override逻辑当然是依然成立的（不成立才奇怪！无需验证）

2 java语言的反射机制，类和类之间非常松散的依赖关系。
与android 的 HAL 有类似之处？

3 java 里面的每个override函数都具有c++ virtual特性,除非使用final关键词

4 20131030关于回调函数（充斥android的listener）与虚函数的区别，我是只可意会不可言传。
5 setOnTouchListener  android里面各种setListener  就是在把派生类对象赋值给基类对象











