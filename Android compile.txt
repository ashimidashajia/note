
1 20140718
在一个全新的pc上，直接编译android
1）bison: command not found
2） Error: could not find jdk tools.jar, please install JDK6, which you can download from java.sun.com.  需要jdk1.6
3）/bin/bash: git: command not found    编译需要git命令吗?   apt-get install git-core
4）host C: acp <= build/tools/acp/acp.c
<command-line>:0:0: warning: "_FORTIFY_SOURCE" redefined [enabled by default]
<built-in>:0:0: note: this is the location of the previous definition
In file included from /usr/include/stdlib.h:25:0,
                 from build/tools/acp/acp.c:11:
/usr/include/features.h:324:26: fatal error: bits/predefs.h: No such file or directory
compilation terminated.

“bits/predefs.h: No such file or directory”  需要安装: g++-multilib

5)target arm C: libc <= bionic/libc/bionic/pthread.c
prebuilt/.../arm-linux-androideabi/bin/as: error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory
没有找到 libz.so    安装 zlib1g-dev（不是这个）  而是  apt-get install lib32z1-dev

6）空out目录，直接 make systemimage 
make: *** No rule to make target `device/amlogic/f16ref/initlogo-robot-1920x1080.rle', needed by `out/target/product/f16ref/root/initlogo.1080p.rle'.  Stop.

【lib32z1-dev】：
compression library - 32 bit development
 zlib is a library implementing the deflate compression method found in gzip and PKZIP. This package includes the development support files for building 32 bit applications. 
【zlib1g-dev】：

lib32z1-dev 依赖 zlib1g-dev

6）Lex: aidl <= frameworks/base/tools/aidl/aidl_language_l.l
/bin/bash: flex: command not found

apt-get install flex 
 
7）No private recovery resources for TARGET_DEVICE f16ref
host C++: llvm-rs-cc <= frameworks/compile/slang/llvm-rs-cc.cpp
<command-line>:0:0: error: "_FORTIFY_SOURCE" redefined [-Werror]

-------------------------
这两天在ubuntu12.04上编译HI3716c android包，发现的如标题的错误。（可以我在公司为啥没有这个错误呢？）

错误打印如下：

host C++: obbtool <= frameworks/base/tools/obbtool/Main.cpp
<command-line>:0:0: error: "_FORTIFY_SOURCE" redefined [-Werror]
<built-in>:0:0: note: this is the location of the previous definition
cc1plus: all warnings being treated as errors
make: *** [out/host/linux-x86/obj/EXECUTABLES/obbtool_intermediates/Main.o] Error 1

上网查了查，解决方法如下：

修改源码目录下/build/core/combo/HOST_linux-x86.mk文件：

将以下语句
HOST_GLOBAL_CFLAGS += -D_FORTIFY_SOURCE=0
修改为
HOST_GLOBAL_CFLAGS += -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0


由于我们使用ubuntu12.04对Android进行编译，Android对Ubuntu12.04的编译平台的支持不是很推荐，有些库的兼容方面会有一些问题，在编译过程中会产生一些错误，我们要进行一些修正：
<command-line>:0:0: error:"_FORTIFY_SOURCE" redefined [-Werror]

原因：
在Android系统过程中，要使用gcc-4.4/g++-4.4的编译器，而Ubuntu12.04的gcc版本为4.6.3

我公司是11.10  原来家里成功编译ics的是14.04  还真没用过12.04.

12.04：
# gcc --version
gcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3，此版编译android 4.0会出错

14.04：
gcc 4.8.2

ubuntu 11.10的gcc版本是4.6.1，版本太高，编译android时失败，要把gcc版本改为4.4.3。

公司的11.10  执行update-alternative --config gcc 看到4.4  4.5  4.6
家里的12.04  执行如上命令显示： update-alternatives: error: no alternatives for gcc.


Install GCC 4.4
First, install GCC 4.4 (and friends):

apt-get install gcc-4.4 g++-4.4 g++-4.4-multilib gcc-4.4-multilib

Set 4.4 to be the default
Then set 4.4 to be higher priority than 4.6:

update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.4 100
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 50
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.4 100
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 50
update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.4 100  //12.04 实测4.0.4  不变cpp也行
update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.6 50

-------------------------


---------------
gperf：
 GNU gperf is a perfect hash function generator. For a given list of strings, it produces a hash function and hash table, in form of C or C++ code, for looking up a value depending on the input string. The hash function is perfect, which means that the hash table has no collisions, and the hash table lookup needs a single string comparison only. 

python-markdown

This is a Python implementation of John Gruber’s Markdown. It is almost completely compliant with the reference implementation, though there are a few very minor differences. See John’s Syntax Documentation for the syntax rules.


lib32readline5-dev

 The GNU readline library aids in the consistency of user interface across discrete programs that need to provide a command line interface.

The GNU history library provides a consistent user interface for recalling lines of previously typed input. 


jdk分为openjdk 和 sun jdk 。直接通过源装sun jdk没有。只有区oracal官网注册下载。open jdk可以直接apt-get
之前在sun官网下载了 jdk-6u35-linux-x64.bin  （jdk1.6 第35个版本）
执行：
./jdk-6u35-linux-x64.bin

添加环境变量在 ~/.profile中：亦说 /etc/profile

2 我在12.04中随便执行 javac 提示：  javac是编译器
gaojie@gaojie:/$ javac
The program 'javac' can be found in the following packages:
 * default-jdk
 * ecj
 * gcj-4.6-jdk
 * openjdk-6-jdk
 * gcj-4.5-jdk
 * openjdk-7-jdk

这样我就知道openjdk的包名了。

gaojie@gaojie:/$ java   // java是虚拟机
The program 'java' can be found in the following packages:
 * default-jre
 * gcj-4.6-jre-headless
 * openjdk-6-jre-headless
 * gcj-4.5-jre-headless
 * openjdk-7-jre-headless

这个问题： 4.0.4 用openjdk 1.6.0_31 不行。此时ubuntu12.04 apt-get的就是这个版本。网查，要用sunjdk：jdk-6u35-linux-x64.bin
==========================
PLATFORM_VERSION=4.0.4

Your version is: java version "1.6.0_31".
The correct version is: Java SE 1.6.

$ java -version
java version "1.6.0_31"
OpenJDK Runtime Environment (IcedTea6 1.13.3) (6b31-1.13.3-1ubuntu1~0.12.04.2)
OpenJDK 64-Bit Server VM (build 23.25-b01, mixed mode)
==========================

在ubuntu12.04上安装 sun jdk：
执行 ./jdk-6u35-linux-x64.bin  这是个自解压包。在当前目录解压出jdk1.6.0_35目录。并没有执行其他高大上的“安装”工作
接着把他拷贝到合适的位置，然后设置环境变量。
一般可以拷贝到 /usr/lib/jvm/  实际可以拷到任何目录。

接下来需要设置环境变量，进入当前用户名的主文件夹，修改.profile文件。注意，该文件是当前用户的配置文件，如果要对使用计算机的所有用户生效，那么需要设置的文件应该是 /etc/profile：



    export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_10
    export JRE_HOME=/usr/lib/jvm/jdk1.7.0_10/jre
    export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH

    export PATH=$JAVA_HOME/bin:$PATH


然后保存关闭，此时在命令行输入java -version将会仍然显示java没有安装。此时，需要使用source更新下.profile文件：

    $ source ~/.profile  （或者 . ~/.profile 就是执行一下这个文件）
但是终端关闭就又回到了openjdk。 log out 一下就好了。
为什么安装了sun jdk就成了默认的了呢?因为export发现：
PATH="/usr/lib/jvm/jdk1.6.0_35/bin:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games"

因为把 /usr/lib/jvm/jdk1.6.0_35/bin 放到了 /usr/bin 的前面了。

如果之前系统里面已经安装了openjdk，可以使用如下方法将默认jdk更改过来：（实际经过上面操作，系统默认已经变成sun jdk了）
开始以及做完上面操作：
update-alternatives --config java
There is only one alternative in link group java: /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java
Nothing to configure.

提示只有一个，然后：
update-alternatives: --install needs <link> <name> <path> <priority>

原理：
/usr/bin/java -> /etc/alternatives/java  -> /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java

所以我执行：
sudo update-alternatives  --install "/usr/bin/java" "java" "/usr/lib/jvm/jdk1.6.0_35/jre/bin/java" 1








------------------
开机logo：
RLE全称（run-length encoding），翻译为游程编码
rle文件

利用Linux的convert命令将11.jpg转化为11.raw：
convert -depth 8 11.jpg rgb:11.raw

将11.raw文件转换为initlogo.rle。在raw图片文件所在目录下执行：/out/host/linux-x86/bin/rgb2565 -rle <11.raw> initlogo.rle

在device/.../f16ref.mk中：
PRODUCT_COPY_FILES += \
       $(LOCAL_PATH)/init.factorytest.rc:init.factorytest.rc \
       $(LOCAL_PATH)/initlogo-robot-1280x720.rle:root/initlogo.720p.rle \

意思是把 initlogo-robot-1280x720.rle 拷贝到 root/initlogo.720p.rle 中
phostshop 可以打开，但是gimp打不开。 ubuntu上可以用 golly程序打开（软件中心下载），不行，打不开。


系统编译完成后，再次执行：
 make systemimage showcommands 会发现什么


1  packages/amlogic/LibPlayer/amplayer/player/version.c  里面有取系统时间或者git版本号的操作，导致每次编译都变化，很烦人，关闭之。
2 编译一个.c 使用prebuilt/linux-x86/toolchain/arm-linux-androideabi-4.4.x/bin/arm-linux-androideabi-gcc 这个编译器
3 image文件是靠mkyaffs2image 程序生成的，他是external目录的yaffs2 目录生成的HOST程序。
4 我mmm external/yaffs2
先调用cc（cc就是gcc，系统中是/usr/bin/cc是链接）编译如下文件：
LOCAL_SRC_FILES := \
	yaffs2/utils/mkyaffs2image.c \
	yaffs2/yaffs_packedtags2.c \
	yaffs2/yaffs_ecc.c \
	yaffs2/yaffs_tagsvalidity.c
然后调用 g++ 链接4个.o 成  mkyaffs2image 并安装到 out/host/linux-x86/bin
$(call dist-for-goals, dist_files, $(LOCAL_BUILT_MODULE)) 这句话干啥用的？

那么 mkyaffsimage4K.dat 是怎么生成的？

host Prebuilt: mkyaffsimage4K.dat (out/host/linux-x86/obj/EXECUTABLES/mkyaffsimage4K.dat_intermediates/mkyaffsimage4K.dat)
out/host/linux-x86/bin/acp -fp device/amlogic/common/tools/mkyaffsimage4K.dat out/host/linux-x86/obj/EXECUTABLES/mkyaffsimage4K.dat_intermediates/mkyaffsimage4K.dat
Install: out/host/linux-x86/bin/mkyaffsimage4K.dat
out/host/linux-x86/bin/acp -fp out/host/linux-x86/obj/EXECUTABLES/mkyaffsimage4K.dat_intermediates/mkyaffsimage4K.dat out/host/linux-x86/bin/mkyaffsimage4K.dat

使用的是  device/amlogic/common/tools 目录下的 mkyaffsimage4k.dat

LOCAL_MODULE := $(TARGET_AMLOGIC_MKYAFFSIMG_TOOL)
BoardConfig.mk 中定义：
TARGET_AMLOGIC_MKYAFFSIMG_TOOL := mkyaffsimage4K.dat


---
每次编译，这个文件device/amlogic/f16ref/f16ref.mk 自动生成？！！！
./build/env_bestv.sh:cp -f $PWD/amlogic/$PRJNAME/conf/f16ref.mk   $PWD/device/amlogic/f16ref/   ！！！

./amlogic/bestv/conf/f16ref.mk  



------------
WARNING: Did not find SPI
Traceback (most recent call last):
  File "./build/tools/releasetools/ota_from_target_files", line 953, in <module>
    main(sys.argv[1:])
  File "./build/tools/releasetools/ota_from_target_files", line 921, in main
    WriteFullOTAPackage(input_zip, output_zip)
  File "./build/tools/releasetools/ota_from_target_files", line 517, in WriteFullOTAPackage
    common.CheckSize(boot_img.data, "boot.img", OPTIONS.info_dict)
UnboundLocalError: local variable 'boot_img' referenced before assignment
make: *** [out/target/product/f16ref/f16ref-ota-1.0.29.20140720231750.bestv.zip] Error 1

这个错误 似曾相识啊？！！


1 最后生成.zip升级包的过程：

make otapackage


2 
./core/definitions.mk
ifeq ($(strip $(SHOW_COMMANDS)),)
define pretty
@echo $1
endef
hide := @
else
define pretty
endef
hide :=
endif

make showcommands xxx  显示详细信息

main.mk 中的伪目标：
.PHONY: showcommands
showcommands:
        @echo >/dev/null




make systemimage 和 make -j4  有什么区别呢？

在makefile里面用 shell 命令的方法：
LIBPLAYER_BUILD_TIME=" $(shell date)"



3 
LOCAL_MODULE_TAGS := optional  这个到底要怎么控制编译？
LOCAL_PROGUARD_ENABLED := disabled


--------------
make: *** No rule to make target `out/target/common/obj/JAVA_LIBRARIES/com.android.phone.common_intermediates/javalib.jar',
 needed by `out/target/common/obj/APPS/Contacts_intermediates/classes-full-debug.jar'. Stop.



-----
system.img 是一个包含了文件系统的映像。类型是yaffs。android提供工具：yaffs和unyaffs，可以将文件夹变成
映像，或者将映像还原为文件夹。

system.img 没有经过任何的压缩，只是把文件夹转换为yaffs映像。



-----------------

1 Build系统
  1) . envsetup.sh help会出现命令提示
	- croot:   Changes directory to the top of the tree.
	- m:       Makes from the top of the tree.
	- mm:      Builds all of the modules in the current directory.【当前目录】
	- mmm:     Builds all of the modules in the supplied directories.【指定目录参数】
	- cgrep:   Greps on all local C/C++ files.【grep检索目标行命令】
	- jgrep:   Greps on all local Java files.
	- resgrep: Greps on all local res/*.xml files.
	- godir:   Go to the directory containing a file.
	tapas是envsetup产生的shell环境函数,执行完evnsetup之后就在当前shell下有了.
  2) showcommands显示命令详情
  3) 顶层目录有Makefile文件,其他的每个component都使用统一标准的 Android.mk
  4) $(info xxx） 输出信息
  5) 改变编译器之方法。android提供2套编译器，在linux-arm.mk文件中
	# You can set TARGET_TOOLS_PREFIX to get gcc from somewhere else
	ifeq ($(strip $($(combo_target)TOOLS_PREFIX)),)
	$(combo_target)TOOLS_PREFIX := \
		prebuilt/$(HOST_PREBUILT_TAG)/toolchain/arm-eabi-4.4.0/bin/arm-eabi-
	endif

  6) froyo的build/core/combo/arch/arm中有armv7-a.mk 和 armv7a-neon.mk
      注释分别为：
	# Generating binaries for the ARMv7-a architecture and higher
	# Generating binaries for the ARMv7-a architecture and higher with NEON  
	arm官网上介绍Cortex-A9时候：
	Optional NEON™ media and/or floating point processing engine
	所以NXP很可能没有NEON单元，区别还有
	-mfpu=vfpv3-d16
	-mfpu=neon 【neon提供FPU所具有的性能和功能】
	那么如何决定使用哪个文件呢？
	core/combo/TARGET_linux-arm.mk中有：

	ifeq ($(strip $(TARGET_ARCH_VARIANT)),)
	TARGET_ARCH_VARIANT := armv5te
	endif
	TARGET_ARCH_SPECIFIC_MAKEFILE := $(BUILD_COMBOS)/arch/$(TARGET_ARCH)/$(TARGET_ARCH_VARIANT).mk
	所以我要去设置 TARGET_ARCH_VARIANT 变量，注意这个文件的注释：
	# Configuration for Linux on ARM.
	# Included by combo/select.mk
	# You can set TARGET_ARCH_VARIANT to use an arch version other
	# than ARMv5TE. Each value should correspond to a file named
	# $(BUILD_COMBOS)/arch/<name>.mk which must contain
	# makefile variable definitions similar to the preprocessor
	# defines in system/core/include/arch/<combo>/AndroidConfig.h. Their
	# 跟AndroidConfig.h有屁关系?!
	# purpose is to allow module Android.mk files to selectively compile
	# different versions of code based upon the funtionality and
	# instructions available in a given architecture version.
	#
	# The blocks also define specific arch_variant_cflags, which
	# include defines, and compiler settings for the given architecture
	# version.
	#
	
	同时在这个文件里会include armv5te.mk ,下面还会判断armv5te.mk中的宏定义
	TARGET_ARCH_VARIANT应该可以设定在你的 product.mk中	
	make TARGET_ARCH_VARIANT=armv7-a 也行！
	那么 product.mk这个文件怎么使用呢？ ？
	显然直接修改 TARGET_linux-arm.mk 文件是最方便的

   7)初次运行 . /build/envsetup.sh 
	including device/htc/dream/vendorsetup.sh
	including device/htc/passion/vendorsetup.sh
	including device/htc/sapphire/vendorsetup.sh


2 关于EABI
  In computer software, an application binary interface (ABI) describes the low-level
  interface between an application program and the operating system or another application.
  GNU EABI is a new application binary interface (ABI) for Linux.
  EABI规定：
  1)应用程序如何发出系统调用来trap到内核态.
  2)如何使用机器的寄存器,RISC处理器的ABI就要规定用那个通用寄存器来作stack pointer和frame pointer.
  3)规定如何进行procedure call.
  EABI is the new "Embedded" ABI by ARM ltd
  The effective changes for users are:
    * Floating point performance, with or without an FPU is very much faster, 
      and mixing soft and hardfloat code is possible
    * Structure packing is not as painful as it used to be (曾经是)
    * More compatibility with various tools (in future - currently linux-elf is well supported)
    * A more efficient syscall convention
    * At present (with gcc-4.1.1) it works with ARMv4t, ARMv5t processors and above, 
      but supporting ARMv4 (e.g., StrongARM) requires toolchain modifications.

3 Android性能测试软件 nbench、benchmark、smartphone bench
  benchmark 有详细的报告，不过我认为图形测试的数据不准确，和分辨率相关，CPU和memory值得参考


4 Python（[KK] , [DJ] ），是一种面向对象、直译式计算机程序设计语言，也是一种功能强大而完善的通用型语言，已经具有十多年的发展历史，成熟且稳定
其中cURL是一个利用URL语法在命令行下工作的文件传输工具

如果想拿某个branch而不是主线上的代码，我们需要用-b参数制定branch名字，比如：
repo init -u git://android.git.kernel.org/platform/manifest.git -b cupcake

另一种情况是，我们只需要某一个project的代码，比如kernel/common，就不需要repo了，直接用Git即可。
git clone git://android.git.kernel.org/kernel/common.git



----------------------------------------------------------
已经不是froyo编译了 注意整理 要整理

1 . build/envsetup.sh 
  including device/htc/dream/vendorsetup.sh
  including device/htc/passion/vendorsetup.sh
  including device/htc/sapphire/vendorsetup.sh

# Execute the contents of any vendorsetup.sh files we can find.
for f in `/bin/ls vendor/*/vendorsetup.sh vendor/*/build/vendorsetup.sh device/*/*/vendorsetup.sh 2> /dev/null`
do
    echo "including $f"
    . $f
done



2 不要执行tapas 否则编译不过去  【变得太快了，2.1还没有搞明白 这里倒变了】

prune        1. 修剪(树木等)2. 精简某事物; 除去某事物多余的部分 [英] [pru:n] 

define first-makefiles-under
$(shell build/tools/findleaves.py --prune=out --prune=.repo --prune=.git \
        --mindepth=2 $(1) Android.mk)
endef

LOCAL_PATH := $(my-dir)

###########################################################
## Retrieve the directory of the current makefile
###########################################################

# Figure out where we are.
define my-dir


/**
 * Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
 * and the fields of this data structure must begin with hw_module_t
 * followed by module specific information.
 */
有的模块就只有 hw_module_t  后面没有跟任何其他的 specific information

/**
 * Every device data structure must begin with hw_device_t
 * followed by module specific public methods and attributes.
 */

typedef struct hw_module_methods_t {
    /** Open a specific device */
    int (*open)(const struct hw_module_t* module, const char* id,
            struct hw_device_t** device);

} hw_module_methods_t;

方法就只有一个 open？？！！


其符號名稱須取名為 HAL_MODULE_INFO_SYM，不可更改。任何的 Stub 主類別名稱都須命名為 HAL_MODULE_INFO_SYM。

Android 中实现调用HAL 是通过 hw_get_module 实现的

int hw_get_module(const char *id, const struct hw_module_t **module) 
{
    int status;
    int i;
    const struct hw_module_t *hmi = NULL;
    char prop[PATH_MAX];
    char path[PATH_MAX];

    /*
     * Here we rely on the fact that calling dlopen multiple times on
     * the same .so will simply increment a refcount (and not load
     * a new copy of the library).
     * We also assume that dlopen() is thread-safe.
     */

    /* Loop through the configuration variants looking for a module */
    for (i=0 ; i<HAL_VARIANT_KEYS_COUNT+1 ; i++) {
        if (i < HAL_VARIANT_KEYS_COUNT) {
            if (property_get(variant_keys[i], prop, NULL) == 0) {
                continue;
            }
            snprintf(path, sizeof(path), "%s/%s.%s.so",
                    HAL_LIBRARY_PATH, id, prop);
        } else {
            snprintf(path, sizeof(path), "%s/%s.default.so",
                    HAL_LIBRARY_PATH, id);
        }
        if (access(path, R_OK)) {
            continue;
        }
        /* we found a library matching this id/variant */
        break;
    }

    status = -ENOENT;
    if (i < HAL_VARIANT_KEYS_COUNT+1) {
        /* load the module, if this fails, we're doomed, and we should not try
         * to load a different variant. */
        status = load(id, path, module);
    }

    return status;
}


/**
 * Load the file defined by the variant and if successful
 * return the dlopen handle and the hmi.
 * @return 0 = success, !0 = failure.
 */
static int load(const char *id,
        const char *path,
        const struct hw_module_t **pHmi)
{
    int status;
    void *handle;
    struct hw_module_t *hmi;

    /*
     * load the symbols resolving undefined symbols before
     * dlopen returns. Since RTLD_GLOBAL is not or'd in with
     * RTLD_NOW the external symbols will not be global
     */
    handle = dlopen(path, RTLD_NOW);  //打开动态库  
    if (handle == NULL) {
        char const *err_str = dlerror();
        LOGE("load: module=%s\n%s", path, err_str?err_str:"unknown");
        status = -EINVAL;
        goto done;
    }

    /* Get the address of the struct hal_module_info. */
    const char *sym = HAL_MODULE_INFO_SYM_AS_STR;  //被定义成“HMI”
    hmi = (struct hw_module_t *)dlsym(handle, sym); //查找HMI这个导出符号 哈哈 并获取其 地址
    if (hmi == NULL) {
        LOGE("load: couldn't find symbol %s", sym);
        status = -EINVAL;
        goto done;
    }

    /* Check that the id matches */
//找到了 hw_module_t 结构
    if (strcmp(id, hmi->id) != 0) {
        LOGE("load: id=%s != hmi->id=%s", id, hmi->id);
        status = -EINVAL;
        goto done;
    }

    hmi->dso = handle;

    /* success */
    status = 0;

    done:
    if (status != 0) {
        hmi = NULL;
        if (handle != NULL) {
            dlclose(handle);
            handle = NULL;
        }
    } else {
        LOGV("loaded HAL id=%s path=%s hmi=%p handle=%p",
                id, path, *pHmi, handle);
    }

//凯旋而归
    *pHmi = hmi;

    return status;
}

调用模块的奥秘就在load中

为什么用HMI 字符串就能查到 hw_module_t结构体呢？
readelf xx.so -s

HAL模块的入口就是 HAL_MODULE_INFO_SYM变量 哈哈


static inline int framebuffer_open(const struct hw_module_t* module, 
        struct framebuffer_device_t** device) {
    return module->methods->open(module, 
            GRALLOC_HARDWARE_FB0, (struct hw_device_t**)device);
}


gralloc 是一个模块 Stub 

operation 的 open 函数是 gralloc_device_open


FramebufferNativeWindow 

Reference counting可以节省程序的运行成本，大量的构造、析构、分配、释放和拷贝的代价被省略。 


高通MSM在做硬件blit操作时传入的结构体buffer_handle_t handle

这个buffer_handle_t可以向前追溯至 native_handle_t。

typedef const native_handle* buffer_handle_t;

typedef native_handle_t native_handle;

typedef struct
{
    int version;        /* sizeof(native_handle_t) */
    int numFds;         /* number of file-descriptors at &data[0] */
    int numInts;        /* number of ints at &data[numFds] */
    int data[0];        /* numFds + numInts ints */
} native_handle_t;

更重要的一个结构体是继承native_handle_t的 private_handle_t，系统常将buffer_handle_t和private_handle_t进行转换。

2）判断是申请FB还是申请显存空间


ASHMEM 和 PMEM ？？！！！


static int mapFrameBuffer(struct private_module_t* module)
{
    pthread_mutex_lock(&module->lock);
    int err = mapFrameBufferLocked(module);
    pthread_mutex_unlock(&module->lock);
    return err;
}


fb = open ("/dev/fb0", O_RDWR);
fb_mem = mmap (NULL, 1024*768, PROT_READ|PROT_WRITE,MAP_SHARED,fb,0);
memset (fb_mem, 0, 1024*768); //这个命令应该只有在root可以执行


include/linux/fb.h中的一些重要的数据结构

#define request_mem_region(start,n,name) __request_region(&iomem_resource, (start), (n), (name))


/**
 * kzalloc - allocate memory. The memory is set to zero.
 * @size: how many bytes of memory are required.
 * @flags: the type of memory to allocate (see kmalloc).
 */
static inline void *kzalloc(size_t size, gfp_t flags)
{
	return kmalloc(size, flags | __GFP_ZERO);
}


./src/sd/platform/lnxKAL/comps/lnxKKAL/src/linkkal_mem.c


-----------
Android 4.0用Android浏览器而不是Chrome。Google称Chrome将是 Android以后的浏览器，
但4.0还不是时候

Android 4.0 合并了智能手机和平板电脑两个版本，因此智能手机直接从 2.3 版本跳到 4.0 ，
因此也就包含了 3.x 中浏览器的特性：
    SVG
    运动传感器 API (加速度计和陀螺仪)
    CSS3 的三维转换效果
    XHR2&CORS
    File API
    HTML 媒体捕获 API，用于摄像头和麦克风
    二进制数组 (Int16Array, Float32Array, etc.)

Android 4.0 依然缺失的特性:Android 还是缺失了在Chrome和iOS5上已有的特性，包括：

    No Server-sent events (BTW, does anybody use it?)
    No WebSockets
    No WebWorkers
    No IndexedDB
    No Web Notifications (that is a real shame for this platform – Firefox on Android is doing it-)
    No WebGL
    No History Management API
    No rich input controls!

性能

Android 浏览器问题多多，特别是在性能方面。而 Google 在其官方文档中强调 4.0 的浏览器
使用更新的 V8 JavaScript 引擎，因此速度快多了，新引擎将有 35-550%的性能提升。

4.0没有内置Adobe Flash Player，Android Market中也没提供4.0版本的Adobe Flash Player
下载，谷歌表示Android 4.0将暂不支持Flash。只有等待Adobe为Andr​​oid 4.0推出Flash Player。
Galaxy NEXUS用户无法加旧版本或者新版本Flash Player到Andr​​oid 4.0当中，除非Adobe推出
和Andr​​oid 4.0兼容的最新版本Flash Player。 
----------------------------
模拟器 Ctrl+F11 可以切换横平。



----------
20120823
要尽最大努力不修改framework里面的代码，而是按照android的规则在外部修改。先以遥控器处理为例。


------
20120929 13:57
TF101 平板升级到4.1.1 可以在settting 开发者选项 中打开adb调试，可以 adb shell
不过这时候进入的是 shell 用户，权限很低。

打开 “终端模拟器” 程序 ps 发现
user：

shell     4666  1     4480   208   ffffffff 00000000 R /sbin/adbd           父进程 init
shell     4672  4666  852    476   c004938c 40012500 S /system/bin/sh       父进程 adbd

u0_a37    4789  106   479568 30260 ffffffff 00000000 S jackpal.androidterm  父进程 zygoze
u0_a37    4803  4789  848    460   ffffffff 00000000 S /system/bin/sh       父进程 jackpal.androidterm

这个系统是被root过的，有/system/xbin/su程序，执行了这个 su 后切换到了root权限，再 ps 多出来

root      4818  4803  848    464   ffffffff 00000000 S sh                   父进程/system/bin/sh
以后就用这个进程执行， 执行sleep 200  ps发现：
root      4905  4818  1044   364   ffffffff 00000000 S sleep                父进程 4818 可以证明  

开发terminal程序多个窗口：

u0_a37    4953  4789  848    460   ffffffff 00000000 S /system/bin/sh       父进程都是 jackpal.androidterm
u0_a37    4962  4789  848    460   ffffffff 00000000 S /system/bin/sh


这个应用在左下角任务管理器中滑动删除，ps发现还有（一般应用在这里删除，ps 就没了）


terminal 为什么常规方法不能kill掉？ 需要在任务信息里面 “强行停止”


---------------------------------------------
Novo 7 开机后，跟360一样，显示了一个开机使用时间，怎么做的呢？

---------------------------------------------
ubuntu11.10编译ics

编译错误 
<command-line>:0:0: warning: "_FORTIFY_SOURCE" redefined [enabled by default]

原因是 11.10 里面的gcc g++ 版本都太高了

android官方网站要求的是10.04 LTS 版本   

11.04 编译froyo也是可以的，看来就是11.10 不行啊

11.10 的unity 还是有很多bug的，一个新软件出现后都需要很多时间完善稳定。


Ubuntu 11.10 GCC4.5 GCC4.6无缝切换
分类： Android Linux 2011-10-18 17:31 439人阅读 评论(0) 收藏 举报
Step1: 检查版本和安装的版本
lee@lee:~$ ls /usr/bin/gcc*

/usr/bin/gcc  /usr/bin/gcc-4.5  /usr/bin/gcc-4.6

如果缺4.5那么就安装哈。

sudo apt-get install gcc-4.5 g++-4.5


g++ -v

gcc -v



Step2:增加可选项

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.5 40
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 30
sudo update-alternatives --config gcc


sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.5 40
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 30
sudo update-alternatives --config g++


如果想删除可选项：

sudo update-alternatives --remove gcc /usr/bin/gcc-4.5

Step3:检查当前版本

g++ -v

gcc -v


实践证明还需要修改 cpp（预处理器）


可是不明白，为什么编译的时候，要用到pc 的gcc 编译那么多的文件呢？不是在simulator上运行吗？



注意gcc4.4.3  安装的时候是gcc-4.4   
android官网上建议用
ubuntu10.04  而此版本gcc 为4.4.3 

apt-get install gcc-4.4
apt-get install g++-4.4
apt-get install g++-4.4-multilib (这个库是干什么用的？)


但是编译器不单单是这几个文件吧，只切换这几个就可以了吗？
最终使用gcc4.4.6 编译通过了

4.5 4.6 都会失败 （注意编译器版本太高的问题）

奇怪，android4.0 中要clang llvm 干什么用啊！ 难道不用gcc编译而是用clang了？

visual box  右Ctrl + H  L F 等切换模式  挂在共享目录后需要注销生效。

---------------------------------
20121018
单独编译 system.img的方法


----------------------------
20130521
今天得知：android提供了预制程序升级机制。
可以在system/app 和 data/app 2个地方同时存在2分apk，运行后者，删除程序，提示apk会
恢复到初始版本。

20130522
/data/data/com.android.providers.settings/database 存储的是电商ip地址信息。
电商存储信息用的是 setting的provider


---------

使用android的编译器 编译内核成功了  但是编译busybox的时候提示一个路径错误

修改：os/oslinux/...../busybox-1.4.0/script/gcc-version.sh

编译android的时候  LOCAL_ARM_MODE 是没有定义的 所以
arm_objects_mode = arm
normal_objects_mode = thumb

MAKECMDGOALS

This is a gziped cpio archive

File System support
     • Ubi filesystem


USB adb debug  ????


cat cpu  时候 显示htc手机 Hardware: bravo
我的平台 hardware : NXP BL-STB platform
./arch/arm/mach-apollo/apollo.c:MACHINE_START(APOLLO, "NXP BL-STB platform")

3 关于如何更改 android的编译器
./tools/adbs:  prefix = "./prebuilt/" + uname + "/toolchain/arm-eabi-4.4.0/bin/"
./tools/adbs:               "/toolchain/arm-eabi-4.4.0/bin/"
./envsetup.sh:    export ANDROID_EABI_TOOLCHAIN=$prebuiltdir/toolchain/arm-eabi-4.4.0/bin
./core/envsetup.mk:	ABP:=$(ABP):$(PWD)/prebuilt/$(HOST_PREBUILT_TAG)/toolchain/arm-eabi-4.4.0/bin
./core/combo/linux-arm.mk:	prebuilt/$(HOST_PREBUILT_TAG)/toolchain/arm-eabi-4.4.0/bin/arm-eabi-
[注]20140630 4.0.4以后，只有./envsetup.sh出现一次arm-eabi-，其他地方都优化掉了。

关于shell的进一步理解
Apollo的bin文件 开始 #!/bin/bash
而 codesourcery 网站的编译器下载下来后看到#!/bin/sh
而我看到 在bin下面已经有一个 sh-》dash的链接
注意一个是bash  一个是 dash

执行 sudo dpkg-reconfigure -plow dash 选择no 
然后再看bin下面 sh 就链接到 bash了

然后就可以安装codesourcery的编译器了

3.1.6. Thread Local Storage

“No.  TLS is only in ARMv6K (MPCORE) and ARMv7 (Cortex).”

注意这个网址！！
http://android.git.kernel.org/?p=platform/hardware/ti/omap3.git;a=summary

-mcpu=cortex-a9

kernel :Makefile:# conficting options:	-mcpu=cortex-a9


# Add the Thumb2 build capabilities for ARM targets
ifdef CONFIG_THUMB2_COMPILATION
KBUILD_CFLAGS += -D__thumb2__ -mthumb
# conficting options:   -mcpu=cortex-a9  这里被注释了  并且这个宏也没有放开  
//在menuconfig中配置
endif




1 LOCAL_SRC_FILES := bar.c.arm 告诉系统总是将bar.c 以arm的模式编译
2 LOCAL_ARM_MODE = arm 也可以设置模式


对于浮点运行会预设硬浮点运算FPA(Float Point Architecture)，而没有FPA的CPU会用FPE
(Float Point Emulation 软浮点)，速度上就会遇到限制，使用EABI(Embedded Application
 Binary Interface)可以对此改善，ARM EABI有许多革新之处，其中最突出的改进就是Float 
Point Performance，它使用Vector Float Point(矢量浮点)，
因此可以提高涉及到浮点运算的程序

+++++++++++++++++++++++++++
oabi eabi 都是针对arm的cpu来说的
eabi 有时候也叫做gnu eabi
eabi的好处： 1 支持软件浮点合硬件浮点 实现浮点功能的混用
	     2 系统调用的效率更高 ？？
             3 软件浮点的情况下，EABI的软件浮点的效率要比oabi高很多
eabi 和 oabi 的区别
	 1 调用规则 包括参数传递以及如何获得返回值
         2 应用程序如何去做系统调用
         3 结构体中的填充和对其 （ padding packing ）


2  Android并没有采用glibc作为C库，而是采用了Google自己开发的Bionic Libc
它的官方Toolchain也是基于Bionic Libc而并非glibc的 这使得使用或移植其他Toolchain来用于Android要比较麻烦
在Google公布用于Android的官方Toolchain之前，多数的Android爱好者使用的Toolchain是在http://www.codesourcery.com/gnu_toolchains/arm/download.html  
下载的一个通用的Toolchain  它用来编译和移植Android 的Linux内核是可行的，因为内核并不需要C库， 但是开发Android的应用程序时，直接采用或者移植其他的Toolchain都比较麻烦，其他Toolchain编译的应用程序只能采用静态编译的方式才能运行于Android模拟器中，这显然是实际开发中所不能接受的方式。目前尚没有看到说明成功移植其他交叉编译器来编译 Android应用程序的资料。 

与glibc相比，Bionic Libc有如下一些特点：
-          采用BSD License，而不是glibc的GPL License；
-          大小只有大约200k，比glibc差不多小一半，且比glibc更快；
-          实现了一个更小、更快的pthread；
-          提供了一些Android所需要的重要函数，如”getprop”, “LOGI”等；
-          不完全支持POSIX标准，比如C++ exceptions，wide chars等；
-          不提供libthread_db 和 libm的实现 


另外，Android中所用的其他一些二进制工具也比较特殊：
         加载动态库时使用的是/system/bin/linker而不是常用的/lib/ld.so;
        prelink工具不是常用的prelink而是apriori，其源代码位于” <your_android>/build/tools/apriori”
        strip工具也没有采用常用的strip，即“<your_android>/prebuilt/linux-x86/toolchain /arm-eabi-4.2.1/bin”
	 目录下的arm-eabi-strip，而是位于<your_android>/out/host /linux-x86/bin/的soslim工具。


3  android 的启动过程
Android 启动过程详解

Android从Linux系统启动有4个步骤；

(1) init进程启动
(2) Native服务启动
(3) System Server，Android服务启动
(4) Home启动

总体启动框架图如：

第一步：initial进程(system\core\init)

  init进程，它是一个由内核启动的用户级进程。内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。init始终是第一个进程.

Init.rc
Init.marvell.rc
Init进程一起来就根据init.rc和init.xxx.rc脚本文件建立了几个基本的服务：
 servicemanamger
 zygote
 。。。

最后Init并不退出，而是担当起property service的功能。

1.1脚本文件
init@System/Core/Init

Init.c： parse_config_file(Init.rc)
    @parse_config_file(Init.marvel.rc)
解析脚本文件：Init.rc和Init.xxxx.rc(硬件平台相关)

Init.rc是Android自己规定的初始化脚本(Android Init Language, System/Core/Init/readme.txt)

该脚本包含四个类型的声明：

Actions
Commands
Services
Options.
1.2 服务启动机制

我们来看看Init是这样解析.rc文件开启服务的。

（1）打开.rc文件，解析文件内容@ system\core\init\init.c
将service信息放置到service_list中。@ system\core\init parser.c
（2）restart_service()@ system\core\init\init.c
 service_start
 execve(…).建立service进程。

第二步 Zygote
 Servicemanager和zygote进程就奠定了Android的基础。Zygote这个进程起来才会建立起真正的Android运行空间，初始化建立的Service都是Navtive service.在.rc脚本文件中zygote的描述：
service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server
所以Zygote从main(…)@frameworks\base\cmds\app_main.cpp开始。

(1) main(…)@frameworks\base\cmds\app_main.cpp
建立Java Runtime
runtime.start("com.android.internal.os.ZygoteInit", startSystemServer);
(2) runtime.start@AndroidRuntime.cpp

建立虚拟机
运行：com.android.internal.os.ZygoteInit：main函数。
（3）main()@com.android.internal.os.ZygoteInit//正真的Zygote。

registerZygoteSocket();//登记Listen端口
startSystemServer();
进入 Zygote服务框架。
经过这几个步骤，Zygote就建立好了，利用Socket通讯，接收ActivityManangerService 的请求，Fork应用程序。

第三步 System Server

startSystemServer@com.android.internal.os.ZygoteInit在 Zygote上fork了一个进程: com.android.server.SystemServer.于是SystemServer@(SystemServer.java）就建立了。Android的所有服务循环框架都是建立SystemServer@(SystemServer.java）上。在SystemServer.java中看不到循环结构，只是可以看到建立了init2的实现函数，建立了一大堆服务，并AddService到 service Manager。

main() @ com/android/server/SystemServer
{
 init1();
}

Init1()是在Native空间实现的（com_andoird_server_systemServer.cpp）。我们一看这个函数就知道了，init1->system_init() @System_init.cpp
在system_init()我们看到了循环闭合管理框架。
{
 Call "com/android/server/SystemServer", "init2"

 ProcessState::self()->startThreadPool();
     IPCThreadState::self()->joinThreadPool();
}
init2()@SystemServer.java中建立了Android中所有要用到的服务。
这个init2（）建立了一个线程，来New Service和AddService来建立服务

第三步 Home启动
在ServerThread@SystemServer.java后半段，我们可以看到系统在启动完所有的Android服务后，做了这样一些动作：

（1） 使用xxx.systemReady()通知各个服务，系统已经就绪。
 (2)  特别对于ActivityManagerService.systemReady(回调)
  Widget.wallpaper,imm(输入法)等ready通知。
Home就是在ActivityManagerService.systemReady()通知的过程中建立的。下面是 ActivityManagerService.systemReady()的伪代码：
systemReady()@ActivityManagerService.java
 resumeTopActivityLocked()
  startHomeActivityLocked();//如果是第一个则启动HomeActivity。
   startActivityLocked（。。。）CATEGORY_HOME



4 Android的编译系统

QEMU是一套由Fabrice Bellard]所编写的模拟处理器的自由软件

Qemu是一个开源的Linux虚拟机,主要用于模拟轻量级的应用，如Android手机模拟器.另外还以自由软体QEMU为基础提供了Android平台专属的Emulator
Android中提供了一个模拟器来模拟ARM核的移动设备。Android的模拟器是基于QEMU开发的，QEMU是一个有名的开源虚拟机项目
SDK的模拟器是支持Android的开源QEMu

要知道，IDE和makefile代表了两种不同的思想：IDE根据强调的是简化计算机与用户的交互；而makefile体现的是自动化。
这个先引用一下百度百科对makefile的一些描述：

一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。 </div>
makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具，一般来说，大多数的IDE都有这个命令，比如：Delphi的make，Visual C++的nmake，Linux下GNU的make。可见，makefile都成为了一种在工程方面的编译方法。 </div>
Make工具最主要也是最基本的功能就是通过makefile文件来描述源程序之间的相互关系并自动维护编译工作。而makefile 文件需要按照某种语法进行编写，文件中需要说明如何编译各个源文件并连接生成可执行文件，并要求定义源文件之间的依赖关系。makefile 文件是许多编译器--包括 Windows NT 下的编译器--维护编译信息的常用方法，只是在集成开发环境中，用户通过友好的界面修改 makefile 文件而已。

About
From QEMU
(Redirected from Index.html)


QEMU is a generic and open source machine emulator and virtualizer.

When used as a machine emulator, QEMU can run OSes and programs made for one machine (e.g. an ARM board) on a different machine (e.g. your own PC). By using dynamic translation, it achieves very good performance.

When used as a virtualizer, QEMU achieves near native performances by executing the guest code directly on the host CPU. QEMU supports virtualization when executing under the Xen hypervisor or using the KVM kernel module in Linux. When using KVM, QEMU can virtualize x86, server and embedded PowerPC, and S390 guests. 

“使用QEMU仿真ARM Linux系统”

5 Android的 make系统

我把android的目录中的toolchain 名字改掉  结果：
prebuilt/linux-x86/toolchain/arm-eabi-4.4.0/bin/arm-eabi-gcc -mthumb-interwork -o out/target/product/generic/obj/lib/crtbegin_dynamic.o -c bionic/libc/arch-arm/bionic/crtbegin_dynamic.S 
然后有
./core/envsetup.mk:	ABP:=$(ABP):$(PWD)/prebuilt/$(HOST_PREBUILT_TAG)/toolchain/arm-eabi-4.4.0/bin


build目录下有一个 envsetup.sh 

在根目录 make  打印出来的
$(info ============================================)
$(info   PLATFORM_VERSION_CODENAME=$(PLATFORM_VERSION_CODENAME))
$(info   PLATFORM_VERSION=$(PLATFORM_VERSION))
$(info   TARGET_PRODUCT=$(TARGET_PRODUCT))
$(info   TARGET_BUILD_VARIANT=$(TARGET_BUILD_VARIANT))
$(info   TARGET_SIMULATOR=$(TARGET_SIMULATOR))
$(info   TARGET_BUILD_TYPE=$(TARGET_BUILD_TYPE))
$(info   TARGET_ARCH=$(TARGET_ARCH))
$(info   HOST_ARCH=$(HOST_ARCH))
$(info   HOST_OS=$(HOST_OS))
$(info   HOST_BUILD_TYPE=$(HOST_BUILD_TYPE))
$(info   BUILD_ID=$(BUILD_ID))
$(info ============================================)
在build/core/envsetup.mk 中定义的

# ---------------------------------------------------------------
# The product defaults to generic on hardware and sim on sim
# NOTE: This will be overridden in product_config.mk if make
# was invoked with a PRODUCT-xxx-yyy goal.
ifeq ($(TARGET_PRODUCT),)
ifeq ($(TARGET_SIMULATOR),true)
TARGET_PRODUCT := sim  可以改成 ifneq  走这里
else
$(info hahahah)   这里会打印出来 说明走这里了  
TARGET_PRODUCT := generic
endif
endif


模拟器上运行的时候 编译的是arm的指令还是x86的指令呢？【】
============================================
PLATFORM_VERSION_CODENAME=REL
PLATFORM_VERSION=2.1-update1
TARGET_PRODUCT=sim
TARGET_BUILD_VARIANT=eng
TARGET_SIMULATOR=true
TARGET_BUILD_TYPE=release
TARGET_ARCH=x86   ******
HOST_ARCH=x86     ******注意这里 sim的时候编译的是x86代码！！！！
HOST_OS=linux
HOST_BUILD_TYPE=release
BUILD_ID=ECLAIR
============================================


============================================
PLATFORM_VERSION_CODENAME=REL
PLATFORM_VERSION=2.1-update1
TARGET_PRODUCT=generic
TARGET_BUILD_VARIANT=eng
TARGET_SIMULATOR=
TARGET_BUILD_TYPE=release
TARGET_ARCH=arm
HOST_ARCH=x86
HOST_OS=linux
HOST_BUILD_TYPE=release
BUILD_ID=ECLAIR
============================================


所以 qemu 模拟器并没有去模拟 arm指令  那goldfish 有是怎么一回事呢？
在bionic/libc/Android.mk中有
ifeq ($(TARGET_ARCH),arm)
   arch-arm/xxx
else
   arch-x86/xxx


所以说：qemu模拟器只是模拟了一个x86的cpu  而不是模拟了一个arm的cpu

那为什么有 prebuild/android-arm/kernel/kernel-qemu kernel-qemu-armv7这几个文件呢？  从文件名字来看 应该是qemu可以模拟armv7

build目录下面有一个 buildspec.mk.default 文件 里面有注释：
######################################################################
# This is a do-nothing template file.  To use it, copy it to a file
# named "buildspec.mk" in the root directory, and uncomment or change
# the variables necessary for your desired configuration.  The file
# "buildspec.mk" should never be checked in to source control.
######################################################################

在 build/core/config.mk中有一段：

# ---------------------------------------------------------------
# Try to include buildspec.mk, which will try to set stuff up.
# If this file doesn't exist, the environemnt variables will
# be used, and if that doesn't work, then the default is an
# arm build
-include $(TOPDIR)buildspec.mk


把这个文件拷贝到 top目录 把simulator = true 放开

编译x86的时候 host C++  的打印 在 ./core/definitions.mk中
###########################################################
## Commands for running gcc to compile a host C++ file
###########################################################
@echo "host C++: 


关于armv7 的内容
./core/combo/arch/arm/armv7-a.mk


一、什么是Android？

Android作为Google公司推出的一款手机开发平台，其本身是基于linux内核的。Google提供的内核源代码中除了linux部分外，有很大一部分是与虚拟处理器Qemu和模拟硬件平台Goldfish相关的。所以如果想将Android移植到实际的硬件平台上需要将这部分代码剥离出来。
二、搭建开发环境
2.1在Vmware中的安装和设置Ubuntu Server 8.10

       本文选择在Win XP下的Vmware中安装Ubuntu Server 8.10作为编译开发服务器。

安装: 略。

设置：

1. 为网卡配置静态IP地址

       虚拟机和XP连接用的虚拟网卡设置IP，gateway和DNS都为192.168.0.1。

       在Vmware虚拟机中执行：

sudo vi /etc/network/interfaces 加入：

auto eth0

iface eth0 inet static

address 192.168.0.2

gateway 192.168.0.1

netmask 255.255.255.0

 

2. 配置DNS

sudo vi /etc/resolv.conf

nameserver 192.168.0.1

 

3. 安装开发工具

sudo apt-get install build-essential vim libncurses-dev lrzsz

 

4. 清理系统

sudo apt-get clean

 
2.2 建立Android内核开发环境

1、工作环境及所需软件包

1）系统环境：Ubuntu 8.10 server

2）交叉编译器：GNU Toolchain for ARM Processors

(http://www.codesourcery.com/gnu_toolchains/arm/download.html)

本文用：arm-2008q3-66-arm-none-eabi-i686-pc-linux-gnu.tar.bz2

3）Android内核源代码：linux-2.6.23-android-m5-rc14.tar.gz

（http://code.google.com/p/android/downloads/list）本文用：linux-2.6.25-android-1.0_r1.tar.gz

4）Android SDK

（http://code.google.com/android/download_list.html）

SDK中带有Android Emulator仿真器等工具，本文用：android-sdk-linux_x86-1.0_r2.zip

2、搭建交叉编译环境

       安装好系统后，把下载的Android kernel，交叉编译器和Android SDK都放在/home/xxx目录，xxx是安装系统时的普通用户的用户名。

1) 安装交叉编译器

$cd ~

$mkdir tools

$cp arm-2008q3-66-arm-none-eabi-i686-pc-linux-gnu.tar.bz2  tools

$cd tools

$tar jxvf arm-2008q3-66-arm-none-eabi-i686-pc-linux-gnu.tar.bz2

 

2) 解压Android SDK

$cp ~/android-sdk-linux_x86-1.0_r2.zip ~/tools

$cd ~/tools/

$unzip android-sdk-linux_x86-1.0_r2.zip

 

3) 解压缩内核源代码

       $mkdir sources

       $cp linux-2.6.25-android-1.0_r1.tar.gz sources

       $cd sources

       $tar zxvf linux-2.6.25-android-1.0_r1.tar.gz

       $mv kernel.git  linux-2.6.25-android-1.0_r1

 

 
三、编译和运行Android Kernel

1）  获取Android官方的默认内核配置文件.config

这个.config文件可以从SDK中得到。启动android模拟器，然后用adb从模拟器中提出内核配置文件：

$~/tools/android-sdk-linux_x86-1.0_r2/tools/emulator &

$adb pull /proc/config.gz  ~/

$mv ~/  ~/sources/linux-2.6.25-android-1.0_r1

$cd ~/sources/linux-2.6.25-android-1.0_r1

$ gunzip config.gz
$ mv config .config

2）编译

$~/mk-kernel.sh sources/linux-2.6.25-android-1.0_r1/

其中mk-kernel.sh脚本如下：

#!/bin/sh

#Simple script for Android Kernel compiling.

#By Neil Chiao, Mar.14,2009

export PATH=$PATH:/home/neil/tools/arm-2008q3/bin

export CROSS_COMPILE=arm-none-eabi-

cd $1||exit 1

make menuconfig

make

3）运行该镜像

$cd ~/tools/android-sdk-linux_x86-1.0_r2/tools/

$./emulator -kernel ~/sources/linux-2.6.25-android-1.0_r1/arch/arm/boot/zImage

Android中提供了一個模擬器來模擬ARM核的移動設備。Android的模擬器是基於QEMU開發的，QEMU是一個有名的開源虛擬機項目（詳見http://bellard.org/qemu/），它可以提供一個虛擬的ARM移動設備。Android模擬器被命名為goldfish，用來模擬包括下面一些功能的ARM SoC:

Android模擬器所對應的源代碼主要在external/qemu目錄下。如果你想將Android移植到其他設備上，熟悉它目前所針對的模擬器環境可以提供一些參考。

對於應用程序的開發者，模擬器提供了很多開發和測試時的便利。無論在Windows下還是Linux下，Android模擬器都可以順利運行，並且Google提供了Eclipse插件，可將模擬器集成到Eclipse的IDE環境。當然，你也可以從命令行啟動Android模擬器。


Android 1.0移置到华硕P535 [历史存档]
Android, 华硕, 历史
LCD、键盘及触摸屏都已正常工作。

演示视频见此：
http://www.youtube.com/watch?v=0GZwguPJCmI

运行文件下载地址：
http://www.rayfile.com/files/603 ... -b77a-0014221b798a/
下载后打开readme文件查看如何运行。
1. 首先我们大家都知道Android是基于Linux之上的一个软件平台，Android移植的大部分工作其实是 Linux到P535的移植。所以，我们首先需要完成Linux的移植。

2. P535原本是Windows Mobile系统（以下简称WM），因此需要解决如何从WM引导进入Linux的问题。烧boot是不可能了，我只有一台P535，可不想把3000多大洋换成砖头。幸好有HaRET这个好工具，它运行在WM下，可以直接读取linux的zImage文件实现内核加载。所以，欲练神功，必先...
学习HaRET，主页地址： http://www.handhelds.org/moin/moin.cgi/HaRET

3. 接下来要编译一个能在P535上跑起来的linux内核文件zImage。从www.kernel.org下载下来的linux源代码编译生成的 zImage是无法直接跑起来的，因为缺了对P535硬件设备的驱动支持。最好有一套能直接支持P535设备的Linux源代码，有吗？没有。如果有的话这移植工作就太没劲了。不过，我们可以找到一个好的起点。请访问链接：
http://www.handhelds.org/moin/moin.cgi/GettingHandheldKernels
handhelds 是一个组织，他们的工作就是移植linux到各种PDA上面，包括HP、HTC、DELL等等，还有Asus，不过都是一些老的型号，不包括P535。这个组织似乎有一两年没什么动静了，他们的Familiar项目最后版本v0.84发布日期是06年8月20日。所以指望他们去更新支持P535是不可能了，我还尝试过发邮件想加入他们的队伍，结果没人理我：（ 。

看来只能自力更生了。他们虽然不更新了，但是他们的网站依然屹立。从上面的链接，我们可以下载到他们维护的最近的linux源代码版本2.6.21。这个版本就是我们的出发点。

4. 载下来的这套源代码我们称为handheld linux2.6.21，它与官方linux2.6.21的区别在于增加了对很多 PDA设备的驱动支持。虽然不包括P535，但我们可以参考其他类似设备完成对我们设备的驱动支持。我当时参考的其它设备主要有：Asus A730, Asus 696, HTC magician等。因为P535的很多硬件部件的芯片型号与这几款设备相同。

那如何知道P535使用的都是什么芯片呢？这得下点狠功夫了，拆机！而且是很彻底的那种。不狠一点怎么能体会到干底层工作的乐趣？！心肠不够狠的弟兄可以参考我拆机后拍的照片。
http://sites.google.com/site/siteofhx/Home/android/p535-hardware
我这台已经被我肢解过好几十次了，之前换触摸屏、升级内存都是大手术，能幸存下来真是顽强。

5. 知道了硬件芯片型号，可又不知道管脚连接，又不可能向Asus要电路图，怎么办？认真学习并操练过前面几个步骤的弟兄可能已经有答案了。HaRET这个工具再次出马，所以要不我怎么说欲练神功，必先....

通过HaRET这个工具，我们可以知道P535中各个部件对应的GPIO，最重要的是搞清楚键盘、LCD、触摸屏，这三个硬件驱动的成功移植是我们的首要目标，这样才能体验到Android Touch操作的快感！

6. OK，这几项准备工作完成后，您就可以开始埋头苦干了，写代码、编译、调试、拷贝、粘贴，快的话几天，慢的话几周，最后炮制出一个能在自己的机器上跑起来的zImage文件。

对了，得用这个交叉编译器：
http://www.codesourcery.com/gnu_ ... c-linux-gnu.tar.bz2

7. 光有zImage最多只能进入黑漆漆的命令行界面，无法验证键盘、液晶和触摸屏是否工作正常，解决这个问题，您可以到这里：
http://familiar.handhelds.org/re ... /files/ipaq-pxa270/
下载一个rootfs系统，准备一张空闲的SD卡，将下载的文件解到卡中，然后通过HaRET引导您炮制好的linux kernel，启来后执行rootfs中的初始化脚本，进入GPE或者OPIE的图形界面，这时您就可以验证您的键盘、LCD和触摸屏驱动是否正常工作了。

如果还不正常，那再埋头苦干吧，这关必须过了才能继续往下走。

8. 过了上一关，Linux的移植已经被你踩在了脚下，您一定有一点兴奋感和成就感了。别急，让我们继续往上爬。

Android SDK 1.0使用的linux版本是2.6.25，而我们刚刚完成移植的版本是2.6.21，要知道他们之间有什么不同吗？在此推荐一个非常棒的工具，Meld Diff Viewer，有了它，后面的工作将变得易如反掌。
从Kernel.org下载一份官方的2.6.25，同您刚完成的handheld 2.6.21比较一下，不比不知道，一比吓一跳！改动的地方是不是很多？不要怕，让我们一步一步搞定。

我们之前的移植是基于handheld的版本完成的，多少有点让我们感觉是踩在了别人的肩膀上爬上来的。没关系，至少我们学会了爬。现在让我们回到地上，自己爬上来。
从 Kernel.org再下载一份官方的2.6.21，用Meld同前面的handheld 2.6.21比较一下，将官方版本缺少的驱动合并过来，不要一股脑全部合并过来，看看您的P535缺少什么才合并什么，这样子您就非常清楚从官方下载的 linux需要增加哪些驱动才能在您的机器上跑起来。

合并完成后，编译和调试您的官方2.6.21版本，让它也能顺利的跑起来，进入GPE和OPIE图形界面。

9. 把移植成功的官方2.6.21，同前面下载的官方2.6.25进行比较，官方比官方，差别是不是没那么恐怖了？同样，将2.6.25缺少的驱动文件从 2.6.21合并过来，编译调试，让2.6.25也跑起来。

10. OK，下面我们要真正开始同Android打交道了。
先下载 Android 使用的linux版本，地址在此：http://code.google.com/p/android/downloads/list
再下载Android SDK 1.0：http://code.google.com/android/download.html
照此教程从SDK中提取Android的rootfs：http://discuz-android.blogspot.c ... id-file-system.html

现在就差Android的linux zImage了。

11. 将Android linux2.6.25同前面移植完成的官方linux2.6.25比较，找出其中的异同，将官方2.6.25缺少的东东从Android linux2.6.25合并过来，注意不要搞错方向了。其中，凡是涉及QEMU、Goldfish及yaffs2的内容没有用处，不要合并过来。您会发现其实Android对linux的改动很小。
这一步的详细操作请参考这个链接：http://elinux.org/Android_on_OMAP

然后编译，又得到一个zImage. 调试它，让它能顺利引导进入Android rootfs中的初始化脚本。

12. 引导进入Android的图形界面不像进入GPE和OPIE那么顺利，因为Android对LCD驱动有特殊的要求，需要Frame Buffer驱动支持double buffering 和 pan function。您需要参考这个帖子：http://androidzaurus.seesaa.net/article/105551643.html 或者 http://www.androidrd.com/thread-9-1-1.html 完成对2.6.25自带的Frame Buffer驱动的修改。


此外，触摸驱动发出的X坐标是对的，Y坐标是倒过来的，您需要修改驱动纠正一下姿势。参考：http://androidzaurus.seesaa.net

5 android里面的编译起 arm-eabi-gcc  和 arm-eabi-gcc-4.4.0 内容一模一样
编译好的文件在：
./out/host/linux-x86/pr/sim/obj/SHARED_LIBRARIES/libsqlite_intermediates/sqlite3.o

请先参考我的另一篇文章如何取得Android源代码，确保正确地拿到了Android kernel/common 项目的Goldfish分支（该分支用于构建运行在emulator上的系统内核，而主线则是用于构建运行在实际设备上的内核代码）

Android对Linux Kernel做了不少的改进，比如添加对yaffs2文件系统的支持，改进蓝牙的支持，改进电源管理机制，以及为模拟器版本添加的Goldfish平台等等，不过内核的编译方式和标准的kernel并没有区别。

尽管很多人安装完Ubuntu后第一件事情就是装上build-essential，不过我在这里还是要提醒一下大家，另外做menuconfig的时候 ncurses-devel库也是必须的。运行以下命令，一次搞定：
sudo apt-get install build-essential ncurses-dev

Android代码树中有一个prebuilt项目，包含了我们编译内核所需的交叉编译工具，如果你拿了完整的Android 1.5代码树，它就会在prebuilt目录下。


3、设定环境变量
把刚才下载的prebuilt中的arm-eabi编译器加入$PATH
$export PATH=$PATH:/home/william/android-source/prebuilt/linux-x86/toolchain/arm-eabi-4.2.1/bin

设定目标arch为arm
$export ARCH=arm

4、设定交叉编译参数
打开kernel目录下的Makefile文件，把CROSS_COMPILE指向刚才下载的prebuilt中的arm-eabi编译器
CROSS_COMPILE ?= arm-eabi-

把
LDFLAGS_BUILD_ID = $(patsubst -Wl$(comma)%,%,\
$(call ld-option, -Wl$(comma)–build-id,))
这一行注释掉，并且添加一个空的LDFLAGS_BUILD_ID定义，如下:
LDFLAGS_BUILD_ID =
下面的这段解释来自陈罡的blog

把它注释掉的原因是目前android的内核还不支持这个选项。–build-id选项，主要是用于在生成的elf可执行文件中加入一个内置的id，这样在core dump，
或者debuginfo的时候就可以很快定位这个模块是哪次build的时候弄出来的。这样就可以避免，每次都把整个文件做一遍效验，然后才能得到该文件的是由哪次
build产生的。对于内核开发者来说，这是很不错的想法，可以节约定位模块版本和其影响的时间。目前，该功能还出于early stage的状态，未来的android
或许会支持，但至少目前的版本是不支持的。
对这个–build-id选项感兴趣的朋友，可以访问下面的网址，它的作者已经解释得非常明白了：
http://fedoraproject.org/wiki/Releases/FeatureBuildId

5 关于ADB
android-sdk-linux_86 目录中的 tools 下面有adb 文件
android-sdk-linux_86/tools$ ./adb shell
就可以进入shell了

进入后在 /proc下面有一个 config.gz 还真有！！！

，然后通过adb pull命令（该命令用于从设备上复制文件到本地）即可完成

emulator 需要一个 avd文件，elips可以创建avd文件   路径在
/home/gaojie/.android/avd/下面

invalid command-line parameter: /home/gaojie/.android/avd/Test.avd.
Hint: use '@foo' to launch a virtual device named 'foo'.

gaojie@gaojie:~/Nxp_prj/android-sdk-linux_86/tools$ ./emulator @Test
这个格式才是正确的，那么 他是怎么找到这个路径的啊！！！


gaojie@gaojie:~/Nxp_prj/android-sdk-linux_86/tools$ ./android list avd
Available Android Virtual Devices:
    Name: hj
    Path: /home/gaojie/.android/avd/hj.avd
  Target: Android 2.1-update1 (API level 7)
    Skin: 800x600
  Sdcard: 2000M
---------
    Name: Test
    Path: /home/gaojie/.android/avd/Test.avd
  Target: Android 2.1-update1 (API level 7)
    Skin: QVGA
  Sdcard: 2000M
gaojie@gaojie:~/Nxp_prj/android-sdk-linux_86/tools$ 


7 Android根目录的结构
init.rc init.goldfish.rc  

Android的程序文件为APK格式，APK文件是Android最终的运行程序，是Android Package的全称，类似于Symbian操作系统中sis文件，APK文件其实ZIP文件格式，但后缀名被修改为APK，通过UnZip解压后

apk文件扩展名改为.zip 
就可以解压缩（UI界面中可以 但是用gunzip不能解）
解压缩后：xx.dex xx.xml  res目录等等
resources.arsc 编译后的二进制资源文件

emulator @Test -show-kernel

请加上-show-kernel参数。

模拟器的kernel路径在 android-sdk-linux_86/platforms/android-7/images/kernel-qemu
这个文件跟 android2.1目录下的 prebuild中的同名文件一样

zImage bzImage 都是用gzip压缩的 
它们不仅是一个压缩文件，而且在这两个文件的开头部分内嵌有gzip解压缩代码
所以你不能用gunzip解压

vmlinux是未压缩的内核  

./target/src/project/project_include.mk:_SDE_PROC_DEFINES = -mcpu=cortex-a9 -mfpu=vfpv3-d16 -mfloat-abi=softfp
./target/src/project/project_include.mk:_SDE_EXTRA_CFLAGS += -DCPU=CORTEX_A9 -D__LINUX_ARM_ARCH__=7 -mcpu=cortex-a9 -mfpu=vfpv3-d16 -mfloat-abi=softfp


修改了init.c后 make

target thumb C: init <= system/core/init/init.c

combo_target

linux-arm.mk 中 有-g参数 可以改成 -ggdb



1 LOCAL_ARM_MODE  从android源码看 这个是加到每个Android.mk文件中的 那么怎么变成全局的呢？
LOCAL_ARM_MODE := arm
注意你同样可以在编译的时候告诉系统编译特定的类型，比如
LOCAL_SRC_FILES := foo.c bar.c.arm
./core/binary.mk:LOCAL_ARM_MODE := $(strip $(LOCAL_ARM_MODE))
./core/binary.mk:arm_objects_mode := $(if $(LOCAL_ARM_MODE),$(LOCAL_ARM_MODE),arm)
./core/binary.mk:normal_objects_mode := $(if $(LOCAL_ARM_MODE),$(LOCAL_ARM_MODE),thumb)
./core/clear_vars.mk:LOCAL_ARM_MODE:=

在external/zlib/Android.mk 里面
# measurements show that the ARM version of ZLib is about x1.17 faster
# than the thumb one...
LOCAL_ARM_MODE := arm

我在./core/clear_vars.mk:LOCAL_ARM_MODE:= 写上arm
结果整个项目都是 target arm c/c++ 了  哈哈
当编译到opengl的时候，出错，看来这个目录的egl.c要用thumb编译
我就在这个目录中的Android.mk中加上  LOCAL_ARM_MODE:= 空
那么这个目录就用thumb编译了 target thumb c

最终编译出来的init 148k 果然变大了！  但是仍然不能运行 还是segmentation fault 我疯了！
readelf后
  Tag_CPU_name: "7-A"
  Tag_CPU_arch: v7
  Tag_CPU_arch_profile: Application
  Tag_ARM_ISA_use: Yes
  Tag_VFP_arch: VFPv3
  Tag_Advanced_SIMD_arch: NEONv1
  Tag_ABI_PCS_wchar_t: 4
  Tag_ABI_FP_denormal: Needed
  Tag_ABI_FP_exceptions: Needed
  Tag_ABI_FP_number_model: IEEE 754
  Tag_ABI_align8_needed: Yes
  Tag_ABI_align8_preserved: Yes, except leaf SP
  Tag_ABI_enum_size: int
  Tag_ABI_HardFP_use: SP and DP

跟可以运行的busybox相比：
  Tag_CPU_name: "7-A"
  Tag_CPU_arch: v7
  Tag_CPU_arch_profile: Application
  Tag_ARM_ISA_use: Yes
  Tag_ABI_PCS_wchar_t: 4
  Tag_ABI_FP_denormal: Needed
  Tag_ABI_FP_exceptions: Needed
  Tag_ABI_FP_number_model: IEEE 754
  Tag_ABI_align8_needed: Yes
  Tag_ABI_align8_preserved: Yes, except leaf SP
  Tag_ABI_enum_size: int
多了：
  Tag_VFP_arch: VFPv3
  Tag_Advanced_SIMD_arch: NEONv1
和
 Tag_ABI_HardFP_use: SP and DP ？？？这个是什么东西呢？


Tag_ABI_HardFP_use, (=27), uleb128 
 0  The user intended that VFP use should be implied by Tag_FP_arch 
 1  The user permitted this entity to use only SP VFP instructions 
 2  The user permitted this entity to use only DP VFP instructions 
 3  The user permitted this entity to use both SP and DP VFP instructions 
    (Note: This is effectively an explicit version of the default encoded by 0)


1 eclipse 使用的是 Helios版本
Windows->Preferences->Android 选择SDK位置 下面可以看到 Android2.1 Android2.2版本 API level 分别为7，8 
Windows->Android SDK and AVD Manager 可以看到android 虚拟设备 
eclipse 可以使用自己喜欢的版本 建议3.4 以上

./adb install ApiDemos.apk 可以安装一个apk
虚拟机目录 ~/.android/avd 

搞清楚 sdk 和 ndk 的区别

下载android sdk 后，里面有SDK Readme.txt 说 “The Android SDK archive now only contains the tools”
说明只有 tools目录 没有 platforms 
use the SDK Manager to install or update SDK components such as platforms,
tools, add-ons, and documentation.

SDK Manager 是什么？ Eclipes 里面的？

To start the SDK Manager, please execute the program "tools/android".  （无法直接执行）

安装2个开发包
eclipse-java-helios-linux-gtk.tar.gz
解压缩即可使用，纯绿色！ 但是原来下载的这个好像是32bit的，在64bit系统上不工作
去http://www.eclipse.org/downloads 下载，这里有很多类型：
Eclipse IDE for Java Developers
Eclipse IDE for Java EE Developers等等  选择第一个
下载了 eclipse-java-indigo-SR1-linux-gtk-x86_64.tar.gz
helios 是3.6   indigo是3.7


android-sdk_r06-linux_86.tgz
解压缩后只有tools目录有东西：
若干elf文件 + lib目录里面是若干.jar文件
这里面没有任何android系统的文件！

然后安装 ADT-plugin
打开eclipse  Help->Install New Software...->Add
Name:android
URL:http://dl-ssl.google.com/android/eclipse/
选择Developr Tools 下面 android DDMS android Developer Tools等等 然后开始安装

使用SDK Manager安装sdk （前面的sdk只是一个外壳）
打开 Android SDK and AVD Manager 找到 Available packages
我原来下载的SDK Tools 是revision6
在Available packages可以看到有 Android SDK Tools revision 13 (20111013 安装之)
还有Documentation for android sdk api13
SDK platform安装3.2（api 13） 2.3.3（api 10） 2.2（api 8）

SDK Tools 和 SDK Platform-tools 有什么区别？
用android sdk and avd manager 下载android2.2 提示需要sdk tools v13 （之前下载的是v6） 安装v13 又需要 sdk platform-tools v7
不知为什么直接下载非常慢

奇怪： 我的Ubuntu 两台机器使用同样的IP和Mac地址，用Switch连接，竟然能够同时上网 什么道理 为什么不IP冲突，为什么上网互不干扰


sdk Tools 是各个版本都可以通用的工具比如emulator等 sdk platform-tools 是版本有区别的工具文件夹 比如adb aapt等 
sdk tools 版本v6的时候 部分platform-tools（2.3.3以后才有 这个东西）
ADT android development tools 在eclipse->help中安装的


Android SDK3.2 离线安装方法

1.分析下载列表https://dl-ssl.google.com/android/repository/repository.xml
2.用迅雷下载如下地址，上面分析得到的链接
http://dl-ssl.google.com/android/repository/android-2.2_r03-linux.zip
http://dl-ssl.google.com/android/repository/android-2.3.1_r02-linux.zip
http://dl-ssl.google.com/android/repository/compatibility_r03.zip


20111101
Android 4.0发布了，可能是太火爆了吧，下载速度极其缓慢，找到了SDK的直接下载地址，不敢私藏，与大家分享
plaform地址：https://dl-ssl.google.com/Android/repository/android-14_r01.zip
sample地址：https://dl-ssl.google.com/Android/repository/samples-14_r01.zip
docs地址：https://dl-ssl.google.com/Android/repository/docs-14_r01.zip

https://dl-ssl.google.com/android/repository/platform-tools_r08-linux.zip
https://dl-ssl.google.com/android/repository/platform-tools_r09-linux.zip

下载android4.0后，提示ADT需要最新版本，更新到v15 发现SDK manager和 AVD manager 菜单项分开管理了
创建AVD时候提示找不到 userdata.img什么的，需要在SDK manager里面更新 ARM EABI v7a System Image


3. 将下载的压缩包放入temp文件夹下
例如：D:\ProgramFiles\android-sdk-windows\temp
 
4. 点击SDK Manaer.exe，让其自动解压缩。  (linux版本怎么办？ 实践证明，解压缩拷贝到android-sdk目录下即可)
5.配置环境变量 PATH = D:\ProgramFiles\android-sdk-windows\tools 
    SDK安装完成

在sdk r13 中 执行 ./android (一个脚本) 会打开Android SDK and AVD Manager 但是 跟从eclipse 中打开的不一样



6 Fawn源码中的参考代码在 /development/samples 这个目录就是eclipse中可以单独下载的sample.tgz包

WXGA：全称Wide Extended Graphics Array，按的16：10比例加宽了笔记本屏幕


7 20111018
 整个安卓的编译，C C++部分使用sdk编译的  java部分就是用jdk 1.5 或者1.6 编译



8 关于ndk  用r6 实验
 Native Development Kit
 不用ndk开发的话，就不能开发 java +c 的代码吗？用 android源码总可以吧
对了：android 源码里面自带的那几个应用程序 都是用到jni方式的吗？  

但是，自从ndk r5发布以后（7月13日，ndk r6发布），已经允许你完全用 C/C++ 来开发应用或者游戏，而不再需要编写任何 Java 的代码。
？？  什么意思？  还可以用纯C开发 android 程序？！

ndk r6 支持x86开发 也就是在toolchains目录下有 arm-linux-4.4.3 和 x86-4.4.3

本次ndk升级中，个人认为比较有用的是ndk-stack工具。在ndk开发中，最令人头疼的是native代码崩溃，但是logcat只显示一些地址信息，无从查找代码崩溃的位置，有了ndk-stack工具，相信会给ndk开发带来很大的帮助。


ndk-stack 工具


ndk智能编译C C++ 代码 不能编译java   java还是要用 eclipse编译  

奥！在sdk 的sample里面 也就是eclipse里面下载的sample包 里面 没有任何 c  c++ 代码！

但是android源码里面自带的应用程序 是可以用 jni 开发的

------------------------------------------------------
Checking API: checkapi-current
target Symbolic: libcutils (out/target/product/bcm7231/symbols/system/lib/libcutils.so)
target Strip: libcrypto (out/target/product/bcm7231/obj/lib/libcrypto.so)
target Symbolic: libicui18n (out/target/product/bcm7231/symbols/system/lib/libicui18n.so)
target SharedLib: libssl (out/target/product/bcm7231/obj/SHARED_LIBRARIES/libssl_intermediates/LINKED/libssl.so)
out/target/common/obj/PACKAGING/public_api.txt:11979: error 4: Added public method android.net.ethernet.IEthernetManager.getEthernetMacAddr
out/target/common/obj/PACKAGING/public_api.txt:15262: error 3: Added class SystemUpdateJni to package android.os
out/target/common/obj/PACKAGING/public_api.txt:18729: error 2: Added package android.settings

******************************
You have tried to change the API from what has been previously approved.

To make these errors go away, you have two choices:
   1) You can add "@hide" javadoc comments to the methods, etc. listed in the
      errors above.

   2) You can update current.txt by executing the following command:
         make update-api

      To submit the revised current.txt to the main Android repository,
      you will need approval.
******************************

make: *** [out/target/common/obj/PACKAGING/checkapi-current-timestamp] Error 38

-----------------------------------------
./frameworks/base/api/current.txt



20130502
lunch g18ref-eng
make过程中需要arm-none-linux-gnueabi-gcc（编译内核用）
kernel在common目录，编译参数：
ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- meson6_g18_jbmr1_defconfig

2 root
买的开发平台没有root。 在sbin下预制了busybox。使用之前下载的

3 nand 使用的是ext4

4 目录管理：
  /mnt/sdcard 是flash模拟的分区，sdcard和usb分别挂载到：
  /storage/external_storage/sdcard0
  /storage/external_storage/sda0
----------------------------------


5 vendor/amlogic/prebuilt/  DLNA.apk 是 “媒体中心” 这个跟eHomeMediaCentor界面相同
但里面只有dex文件无jar包库。
RC_Client.apk  RC_Server.apk 实现手机遥控器
MiracastSink.apk 实现miracast功能

packages/amlogic/下面有些可用apk资源。

6 kernel中的 common/drivers/amlogic/display 是fb驱动

frameworks/base/cmds/screenshot

7 20140319
源码里面有pppoe的代码。
输入法有源码，做一下修改。
latinime.apk是手机自带的文字输入法,如果你安装有其他输入法,可以删除
但是如果没有的话，还是最好不要删掉了

20140320 
编译完成 out 目录22.3G

生成增量包的python代码：build/tools/releasetools/ota_from_target_files

键盘的kl文件在 system/usr/keylayout里面



-------------------------------------
编译kernel的地方：
device/amlogic/g18ref/BoardConfig.mk  中的
include device/amlogic/$(TARGET_PRODUCT)/Kernel.mk注释掉
这里不用改，用下面的方法

要不编译kernle 需要使用
TARGET_NO_KERNEL

device/amlogic/g18ref/BoardConfig.mk:TARGET_NO_KERNEL := false
需要这里改成 true
----------------------

20140424
在system/app下的apk包里不能包含.so,需要把so拷贝出来放到 /system/lib 目录下


系统生成 system.img 的方法：
在build/core/Makefile 中

# $(1): output file
define build-systemimage-target
  @echo "Target system fs image: $(1)"
  @mkdir -p $(dir $(1)) $(systemimage_intermediates) && rm -rf $(systemimage_intermediates)/system_image_info.txt
  $(call generate-userimage-prop-dictionary, $(systemimage_intermediates)/system_image_info.txt)
  $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
      ./build/tools/releasetools/build_image.py \
      $(TARGET_OUT) $(systemimage_intermediates)/system_image_info.txt $(1)
endef


./amlogic/g18ref/BoardConfig.mk
TARGET_USERIMAGES_USE_EXT4 := true  决定使用 ext4 文件系统



---------------------
20140429 整理好的 git仓库编译
build/core/java.mk:37: *** cts/apps/CtsVerifier: Invalid LOCAL_SDK_VERSION 'current' Choices are: . Stop.
原因是 prebuilt目录没有建立


telephony-common
mms-common 
这些模块应该不要编译


libgabi++ 这个库在 abi目录编译


external 有一个 libelf工具 干啥的？
external 有一个 perf工具

ffmpeg的目录
packages/amlogic/LibPlayer/amffmpeg/libavcodec/pgssubdec.c


make otapackage 这是原生android就提供的


x509.pem 是什么？？？
X.509是一种非常通用的证书格式


-----------
生成ota升级包

Package OTA: out/target/product/g18ref/g18ref-ota-20140430.V0801.zip
./build/tools/releasetools/ota_from_target_files 
-vn 
-p out/host/linux-x86 
-k build/target/product/security/testkey 
out/target/product/g18ref/obj/PACKAGING/target_files_intermediates/g18ref-target_files-20140430.V0801.zip 
out/target/product/g18ref/g18ref-ota-20140430.V0801.zip


Package target files: out/target/product/g18ref/obj/PACKAGING/target_files_intermediates/g18ref-target_files-20140430.V0801.zip



我整理完的android工程 怎么没有编译recovery呢？ 难道是因为没有kernel？！ 我把common目录下的kernle删除了


----------
现在的逻辑：不编译内核 就不编译recovery，没有recovery就读取不到fstab文件 就不知道 fs_type就没有办法做
otapackage 怎么办？

所以想把kernel完全独立出来，不好弄！

androd












